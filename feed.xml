<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sourcey</title>
  <subtitle>Developers of code and websites for forward-thinking technology startups.</subtitle>
  <id>https://sourcey.com</id>
  <link href="https://sourcey.com"/>
  <link href="https://sourcey.com/feed.xml" rel="self"/>
  <updated>2017-09-01T00:00:00Z</updated>
  <entry>
    <title>Building and Installing WebRTC on Windows</title>
    <link rel="alternate" href="https://sourcey.com/building-and-installing-webrtc-on-windows/"/>
    <id>https://sourcey.com/building-and-installing-webrtc-on-windows/</id>
    <published>2017-09-01T00:00:00Z</published>
    <updated>2017-09-01T17:21:22+02:00</updated>
    <author>
      <name>Kam Low</name>
    </author>
    <content type="html">&lt;div class="sidebar-section toc"&gt;
  &lt;h4 class="no_toc" id="contents"&gt;Contents&lt;/h4&gt;

&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a id="markdown-toc-install-visual-studio" href="#install-visual-studio"&gt;Install Visual Studio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-install-the-chromium-depot-tools" href="#install-the-chromium-depot-tools"&gt;Install the Chromium depot tools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-download-the-source-code" href="#download-the-source-code"&gt;Download the source code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-update-your-checkout" href="#update-your-checkout"&gt;Update your checkout&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-building-webrtc-library" href="#building-webrtc-library"&gt;Building WebRTC library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;p&gt;&lt;img alt="WebRTC" title="WebRTC" class="align-left" src="/images/logos/webrtc-250x250.png" /&gt;
Installing WebRTC has left many a good developer balder than at the outset, but hopefully this guide will see you through unscathed.&lt;/p&gt;

&lt;p&gt;This guide is written specificaly for 64-bit Windows 10 to build WebRTC &lt;code&gt;branch-head/60&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="install-visual-studio"&gt;Install Visual Studio&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install Visual Studio 2015 Update 3 or later. The Community Edition should work if its license is appropriate for you. Use the Custom Install option and select:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Visual C++, which will select three sub-categories including MFC&lt;/li&gt;
      &lt;li&gt;Universal Windows Apps Development Tools &amp;gt; Tools&lt;/li&gt;
      &lt;li&gt;Universal Windows Apps Development Tools &amp;gt; Windows 10 SDK (10.0.10586)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="install-the-chromium-depot-tools"&gt;Install the Chromium depot tools&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Download &lt;a href="https://storage.googleapis.com/chrome-infra/depot_tools.zip"&gt;depot_tools.zip&lt;/a&gt; and decompress it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add depot_tools to the end of your PATH:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;With Administrator access:
        &lt;ul&gt;
          &lt;li&gt;&lt;code&gt;Control Panel &amp;gt; System and Security &amp;gt; System &amp;gt; Advanced system settings&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;Modify the PATH system variable to include depot_tools&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Without Administrator access:
        &lt;ul&gt;
          &lt;li&gt;&lt;code&gt;Control Panel &amp;gt; User Accounts &amp;gt; User Accounts &amp;gt; Change my environment variables&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;Add a PATH user variable: &lt;code&gt;%PATH%;C:\path\to\depot_tools&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run &lt;code&gt;gclient&lt;/code&gt; from the cmd shell. The first time it is run, it will install its own copy various tools.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="download-the-source-code"&gt;Download the source code&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a working directory, enter it, and run fetch WebRTC. This guide assumes a specific working folder structure. This operation starts from a base directory, eg., workspace and proceeds from there.&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;mkdir webrtc-checkout
&lt;span class="nb"&gt;cd &lt;/span&gt;webrtc-checkout
fetch &lt;span class="nt"&gt;--nohooks&lt;/span&gt; webrtc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose the stable release 60 rather than the most recent release by entering:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;src
git branch &lt;span class="nt"&gt;-r&lt;/span&gt;
git checkout branch-heads/60
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Download the code&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;gclient sync
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;The download will take a while. Do not interrupt this step or you may need to start all over again (a new &lt;code&gt;gclient sync&lt;/code&gt; may be enough, but you might also need wipe your &lt;code&gt;webrtc_checkout\src&lt;/code&gt; folder and start over).&lt;/em&gt;&lt;/p&gt;

&lt;h2 id="update-your-checkout"&gt;Update your checkout&lt;/h2&gt;

&lt;p&gt;To update an existing checkout, you can run:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;git rebase-update
gclient sync
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first command updates the primary Chromium source repository and rebases any of your local branches on top of tip-of-tree (aka the Git branch &lt;code&gt;origin/master&lt;/code&gt;). If you don’t want to use this script, you can also just use git pull or other common Git commands to update the repo.&lt;/p&gt;

&lt;p&gt;The second command syncs the subrepositories to the appropriate versions and re-runs the hooks as needed.&lt;/p&gt;

&lt;h2 id="building-webrtc-library"&gt;Building WebRTC library&lt;/h2&gt;

&lt;p&gt;After you downloading the code, you can start the build from the &lt;code&gt;webrtc_checkout\src&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;The default configuration is for a 64-bit debug build:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;gn gen out/x64/Debug &lt;span class="nt"&gt;--args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"is_debug=true use_rtti=true target_cpu=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;x64&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
ninja &lt;span class="nt"&gt;-C&lt;/span&gt; out/x64/Debug boringssl field_trial_default protobuf_full p2p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create a 64-bit release build you must add &lt;code&gt;is_debug=true&lt;/code&gt; to the GN args&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;gn gen out/x64/Release--args&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"is_debug=false use_rtti=true target_cpu=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;x64&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
ninja &lt;span class="nt"&gt;-C&lt;/span&gt; out/x64/Release boringssl field_trial_default protobuf_full p2p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a fully optimized release build you can omit symbols and tests like by adding the following arguments &lt;code&gt;symbol_level=0 enable_nacl=false&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;These instructions are derived from following links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://webrtc.org/native-code/development/"&gt;https://webrtc.org/native-code/development/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://webrtc.org/native-code/development/prerequisite-sw/"&gt;https://webrtc.org/native-code/development/prerequisite-sw/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://dev.chromium.org/developers/how-tos/install-depot-tools"&gt;http://dev.chromium.org/developers/how-tos/install-depot-tools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://chromium.googlesource.com/chromium/src/+/master/docs/windows_build_instructions.md"&gt;https://chromium.googlesource.com/chromium/src/+/master/docs/windows_build_instructions.md&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://chromium.googlesource.com/chromium/src/+/master/tools/gn/docs/quick_start.md"&gt;https://chromium.googlesource.com/chromium/src/+/master/tools/gn/docs/quick_start.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Pre-compiled WebRTC Libraries for Windows</title>
    <link rel="alternate" href="https://sourcey.com/precompiled-webrtc-for-windows/"/>
    <id>https://sourcey.com/precompiled-webrtc-for-windows/</id>
    <published>2017-03-29T00:00:00Z</published>
    <updated>2017-03-29T20:07:44+02:00</updated>
    <author>
      <name/>
    </author>
    <content type="html">&lt;!-- &lt;div class="sidebar-section toc"&gt;
#### Contents
{:.no_toc}

* ToC
{:toc}
&lt;/div&gt; --&gt;

&lt;p&gt;&lt;img alt="WebRTC" title="WebRTC" class="align-left" src="/images/logos/webrtc-250x250.png" /&gt;
After a number of requests from frustrated developers we’ve started providing precompiled WebRTC native libraries and headers for Windows. There’s no need to compile anything or jump through any hoops, just download the packages and extract them to get started.&lt;/p&gt;

&lt;p&gt;Weighing in at over &lt;strong&gt;6gb&lt;/strong&gt;, the WebRTC repository is an absolute monster with a myriad of dependencies that no developer without a fat paycheck from Google should have to mess with. However, once the fat was trimmed we managed to get the archived file size down to about &lt;strong&gt;2.3mb&lt;/strong&gt; for all required dev headers, and &lt;strong&gt;72.3mb&lt;/strong&gt; for pre-compiled Debug and Release libraries.&lt;/p&gt;

&lt;p&gt;These libraries are provided for use with &lt;a href="/libsourcey"&gt;LibSourcey&lt;/a&gt;, but can be used by anyone. Builds are not nightly just yet, but we will update the build for every major release and important bugfix.&lt;/p&gt;

&lt;h2 id="downloads"&gt;Downloads&lt;/h2&gt;

&lt;p&gt;Libraries have been compiled with Visual Studio 2015 Update 2 on Windows 10, with both &lt;code&gt;Debug&lt;/code&gt; and &lt;code&gt;Release&lt;/code&gt; versions provided for &lt;code&gt;x86&lt;/code&gt; and &lt;code&gt;x64&lt;/code&gt; architectures. You will need &lt;a href="http://www.7-zip.org/download.html"&gt;7-Zip&lt;/a&gt; to extract the archives.&lt;/p&gt;

&lt;h4 id="master-0e22a4cfd--feb-23-071132-2017"&gt;master (0e22a4cfd) — Feb 23 07:11:32 2017&lt;/h4&gt;

&lt;table width="100%"&gt;
  &lt;tr&gt;
    &lt;th&gt;File&lt;/th&gt;
    &lt;!-- &lt;th&gt;Type&lt;/th&gt; --&gt;
&lt;!--     &lt;th&gt;Version&lt;/th&gt;  — Feb 23 07:11:32 2017--&gt;
    &lt;th&gt;Size&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href="https://github.com/sourcey/webrtc-windows-builds/raw/master/webrtc-master-0e22a4cfd-headers.7z"&gt;webrtc-master-0e22a4cfd-headers.7z&lt;/a&gt;&lt;/td&gt;
    &lt;!-- &lt;td&gt;7-Zip `lzma2`&lt;/td&gt; --&gt;
&lt;!--     &lt;td&gt;master (0e22a4cfd)&lt;/td&gt; --&gt;
    &lt;td&gt;2.3mb&lt;/td&gt;
    &lt;td&gt;Development headers&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href="https://github.com/sourcey/webrtc-windows-builds/raw/master/webrtc-master-0e22a4cfd-vs2015-x64.7z"&gt;webrtc-master-0e22a4cfd-vs2015-x64.7z&lt;/a&gt;&lt;/td&gt;
    &lt;!-- &lt;td&gt;7-Zip `lzma2`&lt;/td&gt; --&gt;
&lt;!--     &lt;td&gt;master (0e22a4cfd)&lt;/td&gt; --&gt;
    &lt;td&gt;72.3mb&lt;/td&gt;
    &lt;td&gt;Windows 64-bit (x64) Debug and Release libraries&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href="https://github.com/sourcey/webrtc-windows-builds/raw/master/webrtc-master-0e22a4cfd-vs2015-x86.7z"&gt;webrtc-master-0e22a4cfd-vs2015-x86.7z&lt;/a&gt;&lt;/td&gt;
    &lt;!-- &lt;td&gt;7-Zip `lzma2`&lt;/td&gt; --&gt;
&lt;!--     &lt;td&gt;master (0e22a4cfd)&lt;/td&gt; --&gt;
    &lt;td&gt;57.9mb&lt;/td&gt;
    &lt;td&gt;Windows 32-bit (x86) Debug and Release libraries&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id="compile-options"&gt;Compile options&lt;/h2&gt;

&lt;p&gt;Debug builds have been created with all debug symbols enabled, and release builds have been optimized for for maximum performance. The exact build options used are as follows:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;gn gen out/x86/Debug &lt;span class="nt"&gt;--args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"is_debug=true rtc_include_tests=false target_cpu=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;x86&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
gn gen out/x86/Release &lt;span class="nt"&gt;--args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"is_debug=false rtc_include_tests=false target_cpu=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;x86&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; is_component_build=true symbol_level=0 enable_nacl=false"&lt;/span&gt;
gn gen out/x64/Debug &lt;span class="nt"&gt;--args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"is_debug=true rtc_include_tests=false target_cpu=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;x64&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
gn gen out/x64/Release &lt;span class="nt"&gt;--args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"is_debug=false rtc_include_tests=false target_cpu=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;x64&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; is_component_build=true symbol_level=0 enable_nacl=false"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Generating Beautiful C++ Markdown Documentation with Moxygen</title>
    <link rel="alternate" href="https://sourcey.com/generating-beautiful-markdown-documentation-with-moxygen/"/>
    <id>https://sourcey.com/generating-beautiful-markdown-documentation-with-moxygen/</id>
    <published>2016-11-10T00:00:00Z</published>
    <updated>2017-03-29T20:11:01+02:00</updated>
    <author>
      <name>Kam Low</name>
    </author>
    <content type="html">&lt;div class="sidebar-section toc"&gt;
  &lt;h4 class="no_toc" id="contents"&gt;Contents&lt;/h4&gt;

&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a id="markdown-toc-why-markdown" href="#why-markdown"&gt;Why Markdown?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-parsing-c" href="#parsing-c"&gt;Parsing C++&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-generating-markdown" href="#generating-markdown"&gt;Generating Markdown&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-using-moxygen" href="#using-moxygen"&gt;Using Moxygen&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a id="markdown-toc-single-page-output" href="#single-page-output"&gt;Single Page Output&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a id="markdown-toc-multi-page-output" href="#multi-page-output"&gt;Multi Page Output&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-hosting-your-documentation" href="#hosting-your-documentation"&gt;Hosting Your Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-conclusion" href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;p&gt;For years generating simple and elegant documentation has been a thorn in the side for C++ developers. The two main purpose built tools for the job that have been around forever are Doxygen and Sphynx, are either one would be ideal if you wanted to generate documentation that looks like it belongs in a Windows 3.1 help file.&lt;/p&gt;

&lt;p&gt;I’ve been aware of the situation for some time, but about a month ago I resumed my search for a simple C++ documentation solution for &lt;a href="http://sourcey.com/libsourcey/"&gt;LibSourcey&lt;/a&gt;, and discovered there was still absolutely nothing out there. So as any self respecting hacker would so, I set out to build one in sheer disgust.&lt;/p&gt;

&lt;p&gt;The following three sections are about the state of C++ parsers and documentation generators, so if you want to go straight to installing and using Moxygen then &lt;a href="#using-moxygen"&gt;click here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="why-markdown"&gt;Why Markdown?&lt;/h2&gt;

&lt;p&gt;There are those that &lt;a href="http://ericholscher.com/blog/2016/mar/15/dont-use-markdown-for-technical-docs/"&gt;dismiss&lt;/a&gt; Markdown as a viable solution for generating API documentation, and yes, it’s true that the format has it’s standardisation issues, but those are covered in all the important libraries, and if you don’t need to generate highly technical documentation then I ask you, why not?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Markdown is a pervasive format and only gaining traction&lt;/li&gt;
  &lt;li&gt;You can keep your README and other help docs in the same format as your API spec&lt;/li&gt;
  &lt;li&gt;It’s easy to read in source&lt;/li&gt;
  &lt;li&gt;There are many Markdown to HTML generators available&lt;/li&gt;
  &lt;li&gt;You can drop the spec directly into a Jekyll or Middleman type static website generator&lt;/li&gt;
  &lt;li&gt;GitBook can convert Markdown to PDF, Moby and ePub&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OK enough blathering, point made…&lt;/p&gt;

&lt;h2 id="parsing-c"&gt;Parsing C++&lt;/h2&gt;

&lt;p&gt;The first thing that’s required is to output C++ code into a more parsable format, such as XML or similar. The aren’t many solutions for parsing C++, and the reason for that is because the language is so bloody hard to parse.&lt;/p&gt;

&lt;p&gt;There only real viable open source solutions that I’m aware of are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CastXML&lt;/strong&gt; — CastXML is as XML output extension for GCC, and the successor to GCCXML. While GCC is an awesome compiler and C++ parser, it only works on unix systems which makes cross platform an issue, and by the time the C++ is processed by the parser the comments are long gone - therefore and extra process would be required to extract source code comments. Doable, but not ideal.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Clang&lt;/strong&gt; — Clang has an awesome standards compliant C++ parser, it’s cross platform, but unfortunately it outputs the &lt;a href="http://clang.llvm.org/docs/IntroductionToTheClangAST.html"&gt;AST&lt;/a&gt; format which would be a Herculean feat to turn into something readable. Let’s keep looking.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Doxygen XML&lt;/strong&gt; — I know I badmouthed Doxygen in the first paragraph, but Doxygen is actually pretty awesome (just the HTML output stinks). It works cross platform, supports many languages (good for the future development of our Markdown generator), and also outputs raw XML that is relatively easy to parse. Perfect!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="generating-markdown"&gt;Generating Markdown&lt;/h2&gt;

&lt;p&gt;Markdown is a relatively new kid on the block, especially in the somewhat dusty world of C++, therefore one couldn’t expect that there would be a lot of tools available in the Markdown department just yet.&lt;/p&gt;

&lt;p&gt;I found two projects that were of some use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;cldoc&lt;/strong&gt; — &lt;a href="https://github.com/jessevdk/cldoc"&gt;Cldoc&lt;/a&gt; is a python project based on the Clang parser, and actually outputs pretty nice &lt;a href="http://jessevdk.github.io/cldoc/example/"&gt;documentation&lt;/a&gt; and apparently also outputs Markdown. Unfortunately though the issues are piling up on Github and it looks pretty unmaintained at this point in time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;doxygen2md&lt;/strong&gt; — &lt;a href="https://github.com/pferdinand/doxygen2md"&gt;doxygen2md&lt;/a&gt; is a super simple nodejs parser for Doxygen XML output. Unfortunately it’s only suitable for simple single page documentation. It borked at multiple points when parsing the Doxygen output from LibSourcey, and it also produced some pretty interesting output when I threw some nested namespaces at it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As it stands the best C++ documentation parser available for C++ is currently Doxygen, and as nodejs is a quick and easy platform to work on I opted to extend the parser from doxygen2md in order to build &lt;a href="https://github.com/sourcey/moxygen"&gt;Moxygen&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="using-moxygen"&gt;Using Moxygen&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Install &lt;a href="https://www.stack.nl/~dimitri/doxygen/manual/install.html"&gt;Doxygen&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;GENERATE_XML=YES&lt;/code&gt; to your &lt;code&gt;Doxyfile&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;doxygen&lt;/code&gt; to generate the XML documentation.&lt;/li&gt;
  &lt;li&gt;Install &lt;code&gt;moxygen&lt;/code&gt; like so: &lt;code&gt;npm install moxygen -g&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;moxygen&lt;/code&gt; providing the folder location of the XML documentation as the first argument ie. &lt;code&gt;{OUTPUT_DIRECTORY}/xml&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Usage: moxygen [options] &amp;lt;doxygen directory&amp;gt;

Options:

  -h, --help             output usage information
  -V, --version          output the version number
  -v, --verbose          verbose mode
  -a, --anchors          add anchors to internal links
  -g, --modules          output doxygen modules into separate files
  -l, --language &amp;lt;lang&amp;gt;  programming language
  -t, --templates &amp;lt;dir&amp;gt;  custom templates directory
  -o, --output &amp;lt;file&amp;gt;    output file (must contain %s when using modules)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="single-page-output"&gt;Single Page Output&lt;/h3&gt;

&lt;p&gt;If you want single page Markdown output the you can run Moxygen like so:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;moxygen --anchors --output api.md /path/to/doxygen/xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="multi-page-output"&gt;Multi Page Output&lt;/h3&gt;

&lt;p&gt;Moxygen supports the doxygen &lt;a href="http://www.stack.nl/~dimitri/doxygen/manual/grouping.html#modules"&gt;modules&lt;/a&gt; syntax for generating multi page documentation.&lt;/p&gt;

&lt;p&gt;Every &lt;a href="http://www.stack.nl/~dimitri/doxygen/manual/commands.html#cmddefgroup"&gt;\defgroup&lt;/a&gt; in your source code will be parsed into a separate output files, with internal reference updated accordingly.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;moxygen --anchors --modules --output api-%s.md /path/to/doxygen/xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="hosting-your-documentation"&gt;Hosting Your Documentation&lt;/h2&gt;

&lt;p&gt;We use a combination of GitBook and Middleman for &lt;a href="http://sourcey.com/libsourcey/"&gt;LibSourcey&lt;/a&gt;. It’s very easy to setup; the GitBook is located in the &lt;code&gt;doc&lt;/code&gt; folder of the &lt;a href="https://github.com/sourcey/libsourcey/tree/master/doc"&gt;repository&lt;/a&gt;, with symlinks to the main README and LICENSE files so they can be reused in the book. Next the static GitBook HTML is copied across to out Middleman website and deployed using GitHub pages. All in all a very convenient (and cost effective!) solution.&lt;/p&gt;

&lt;p&gt;You could also opt to store your documentation on a separate GitBook repository, that way you would just need to push your repository to update your live documentation.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It’s my hope that with Moxygen, C++ developers will now have a way to generate more aesthetically pleasing and readable documentation. Since we only ever look at the docs when we absolutely have to, let’s make the process as enjoyable as possible! :)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Recording Native WebRTC Streams with LibSourcey and FFmpeg</title>
    <link rel="alternate" href="https://sourcey.com/recording-native-webrtc-streams-with-libsourcey-and-ffmpeg/"/>
    <id>https://sourcey.com/recording-native-webrtc-streams-with-libsourcey-and-ffmpeg/</id>
    <published>2016-10-31T00:00:00Z</published>
    <updated>2017-03-29T20:07:44+02:00</updated>
    <author>
      <name>Kam Low</name>
    </author>
    <content type="html">&lt;div class="sidebar-section toc"&gt;
  &lt;h4 class="no_toc" id="contents"&gt;Contents&lt;/h4&gt;

&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a id="markdown-toc-how-it-works" href="#how-it-works"&gt;How it Works&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-using-the-code" href="#using-the-code"&gt;Using the Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API"&gt;MediaStream Recording API&lt;/a&gt; lets us record WebRTC streams in the browser, but what about recording a live WebRTC stream in a native app or on the server side? &lt;a href="/libsourcey"&gt;LibSourcey&lt;/a&gt; has a new WebRTC module available that lets you do exactly that.&lt;/p&gt;

&lt;p&gt;Before going into details the full open source &lt;a href="https://github.com/sourcey/libsourcey/tree/master/src/webrtc/samples/webrtcrecorder"&gt;demo code is here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="how-it-works"&gt;How it Works&lt;/h2&gt;

&lt;p&gt;Basically, the server operates as a standard WebRTC peer, so you connect to it from the browser (or another native app) as you would normally by initiating a &lt;code&gt;RTCPeerConnection&lt;/code&gt;, and the server reads any media sent from the peer and encodes it in realtime using FFmpeg.&lt;/p&gt;

&lt;p&gt;WebRTC signaling happens courtesy of &lt;a href="/symple"&gt;Symple&lt;/a&gt;, our propose built messaging protocol for scalable high speed native to browser communications.&lt;/p&gt;

&lt;p&gt;For those of you familiar with the native WebRTC C++ codebase, what we are doing is overriding the &lt;code&gt;rtc::VideoSinkInterface&amp;lt;cricket::VideoFrame&amp;gt;&lt;/code&gt; and &lt;code&gt;public webrtc::AudioTrackSinkInterface&lt;/code&gt; in order to capture audio and video packets from the incoming &lt;code&gt;webrtc::MediaStream&lt;/code&gt;. The &lt;code&gt;scy::av::MultiplexEncoder&lt;/code&gt; then works with FFmpeg under the hood to encode and multiplex the live streams into the output file/stream.&lt;/p&gt;

&lt;p&gt;The main WebRTC StreamRecorder class is &lt;a href="https://github.com/sourcey/libsourcey/blob/master/src/webrtc/samples/webrtcrecorder/streamrecorder.cpp"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="using-the-code"&gt;Using the Code&lt;/h2&gt;

&lt;p&gt;To get started compile LibSourcey with FFmpeg and WebRTC, and samples enabled. The &lt;code&gt;webrtcrecorder&lt;/code&gt; binary will be compiled and you can test it with the provided client code (you will need Nodejs installed).&lt;/p&gt;

&lt;p&gt;Please refer to the &lt;a href="https://github.com/sourcey/libsourcey/blob/master/src/webrtc/samples/webrtcrecorder/README.md"&gt;README&lt;/a&gt; in the &lt;code&gt;webrtcrecorder&lt;/code&gt; sample directory for more information.&lt;/p&gt;

&lt;p&gt;If you find this code useful or end up using it in a real world scenario please share your thoughts and experience with others in the comments below.&lt;/p&gt;

&lt;p&gt;All contributions to the codebase are welcome, and we hope to continue to improve our WebRTC integrations over time. Good luck and happy coding!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Spectacle</title>
    <link rel="alternate" href="https://sourcey.com/spectacle/"/>
    <id>https://sourcey.com/spectacle/</id>
    <published>2016-01-12T00:00:00Z</published>
    <updated>2017-03-29T20:07:44+02:00</updated>
    <author>
      <name/>
    </author>
    <content type="html">&lt;div class="sidebar-section toc"&gt;
  &lt;h4 class="no_toc" id="contents"&gt;Contents&lt;/h4&gt;

&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a id="markdown-toc-live-demo" href="#live-demo"&gt;Live Demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-features" href="#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-getting-started" href="#getting-started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-configuration-options" href="#configuration-options"&gt;Configuration Options&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-custom-builds" href="#custom-builds"&gt;Custom Builds&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-optimizing-your-workflow" href="#optimizing-your-workflow"&gt;Optimizing Your Workflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-more-information" href="#more-information"&gt;More Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;dl&gt;
  &lt;dt&gt;Repository&lt;/dt&gt;
  &lt;dd&gt;&lt;a href="https://github.com/sourcey/spectacle"&gt;https://github.com/sourcey/spectacle&lt;/a&gt;&lt;/dd&gt;
  &lt;dt&gt;Licence&lt;/dt&gt;
  &lt;dd&gt;MIT&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Spectacle generates beautiful static HTML5 documentation from &lt;a href="https://openapis.org"&gt;OpenAPI&lt;/a&gt;/&lt;a href="http://swagger.io"&gt;Swagger&lt;/a&gt; 2.0 API specifications.&lt;/p&gt;

&lt;!--
With Spectacle you can have beautiful HTML5 documentation for your API ready to be deployed in a matter of minutes.
--&gt;

&lt;p&gt;The goal of Spectacle is help you “save time and look good” by using a well written spec to automatically generate your API docs. Using an API spec to generate your docs has a number of great advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Maintain a single source&lt;/strong&gt;: Save time by removing the need to maintain a separate API spec and API documentation.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No more out-of-date documentation&lt;/strong&gt;: Your documentation will always be up-to-date with your API spec.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Be a better developer&lt;/strong&gt;: Your entire API system will be more stable and robust when built around your spec as a single source of truth.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Documentation is just the beginning&lt;/strong&gt;: Generate your API system from your spec, including; tests, client implementations, and server code. See also &lt;a href="#optimizing-your-workflow"&gt;Optimizing Your Workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="live-demo"&gt;Live Demo&lt;/h2&gt;

&lt;p&gt;See a demo of Spectacle in action here: &lt;a href="http://cheesestore.github.io"&gt;http://cheesestore.github.io&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="features"&gt;Features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;OpenAPI/Swagger 2.0 support&lt;/strong&gt;: Support for the latest OpenAPI/Swagger specification - the new standard for documenting REST APIs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Clean responsive design&lt;/strong&gt;: Spectacle features a responsive HTML5 and CSS3 layout built with &lt;a href="http://foundation.zurb.com/sites.html"&gt;Foundation 6&lt;/a&gt; that looks great on all devices and screen sizes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Embed into your existing website&lt;/strong&gt;: Spectacle features an embedded option that lets you generate docs without a HTML &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; layout for convenient integration into your existing website.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Live preview developer mode&lt;/strong&gt;: Spectacle comes with a development mode that starts a local HTTP server with a file watcher and live reload so you can preview changes to your live documentation in your browser as you write your spec.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Configurable templates and styles&lt;/strong&gt;: Spectacle is built with easily configurable Handlebars templates and SCSS styles so you can add your own flavor. See &lt;a href="#custom-builds"&gt;Custom Builds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="getting-started"&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Simply install Spectacle from &lt;code&gt;npm&lt;/code&gt; like so:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;npm install &lt;span class="nt"&gt;-g&lt;/span&gt; spectacle-docs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next pass your &lt;code&gt;swagger.json&lt;/code&gt; document use the CLI to generate your documentation.&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;spectacle your_swagger_api.json

&lt;span class="c"&gt;# Or use the cheese.json example to test it out&lt;/span&gt;
&lt;span class="c"&gt;# spectacle test/fixtures/cheese.json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your generated documentation will be located in the &lt;code&gt;/public&lt;/code&gt; directory. You can either copy the generated HTML to your web server, or view your docs by starting the internal web server like so:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;spectacle &lt;span class="nt"&gt;-s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now point your browser to &lt;a href="http://localhost:4400/"&gt;http://localhost:4400/&lt;/a&gt; and presto - sexy docs for your API!&lt;/p&gt;

&lt;h2 id="configuration-options"&gt;Configuration Options&lt;/h2&gt;

&lt;p&gt;The basic CLI options are detailed below:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;spectacle &lt;span class="nt"&gt;-h&lt;/span&gt;

  Usage: cli spactacle &lt;span class="o"&gt;[&lt;/span&gt;options] &amp;lt;specfile&amp;gt;

  Options:

  &lt;span class="nt"&gt;-h&lt;/span&gt;, &lt;span class="nt"&gt;--help&lt;/span&gt;                output usage information
  &lt;span class="nt"&gt;-V&lt;/span&gt;, &lt;span class="nt"&gt;--version&lt;/span&gt;             output the version number
  &lt;span class="nt"&gt;-C&lt;/span&gt;, &lt;span class="nt"&gt;--disable-css&lt;/span&gt;         omit CSS generation &lt;span class="o"&gt;(&lt;/span&gt;default: &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;-J&lt;/span&gt;, &lt;span class="nt"&gt;--disable-js&lt;/span&gt;          omit JavaScript generation &lt;span class="o"&gt;(&lt;/span&gt;default: &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;-e&lt;/span&gt;, &lt;span class="nt"&gt;--embeddable&lt;/span&gt;          omit the HTML &amp;lt;body/&amp;gt; and generate the documentation content only &lt;span class="o"&gt;(&lt;/span&gt;default: &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;-d&lt;/span&gt;, &lt;span class="nt"&gt;--development-mode&lt;/span&gt;    start HTTP server with the file watcher and live reload &lt;span class="o"&gt;(&lt;/span&gt;default: &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;-s&lt;/span&gt;, &lt;span class="nt"&gt;--start-server&lt;/span&gt;        start the HTTP server without any development features
  &lt;span class="nt"&gt;-p&lt;/span&gt;, &lt;span class="nt"&gt;--port&lt;/span&gt; &amp;lt;dir&amp;gt;          the port number &lt;span class="k"&gt;for &lt;/span&gt;the HTTP server to listen on &lt;span class="o"&gt;(&lt;/span&gt;default: 4400&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;-t&lt;/span&gt;, &lt;span class="nt"&gt;--target-dir&lt;/span&gt; &amp;lt;dir&amp;gt;    the target build directory &lt;span class="o"&gt;(&lt;/span&gt;default: ./public&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;-f&lt;/span&gt;, &lt;span class="nt"&gt;--target-file&lt;/span&gt; &amp;lt;file&amp;gt;  the target build HTML file &lt;span class="o"&gt;(&lt;/span&gt;default: index.html&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;-a&lt;/span&gt;, &lt;span class="nt"&gt;--app-dir&lt;/span&gt; &amp;lt;dir&amp;gt;       the application &lt;span class="nb"&gt;source &lt;/span&gt;directory &lt;span class="o"&gt;(&lt;/span&gt;default: ./app&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;-i&lt;/span&gt;, &lt;span class="nt"&gt;--cache-dir&lt;/span&gt; &amp;lt;dir&amp;gt;     the intermediate build cache directory &lt;span class="o"&gt;(&lt;/span&gt;default: ./.cache&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;-l&lt;/span&gt;, &lt;span class="nt"&gt;--logo-file&lt;/span&gt; &amp;lt;file&amp;gt;    specify a custom logo file &lt;span class="o"&gt;(&lt;/span&gt;default: null&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;-c&lt;/span&gt;, &lt;span class="nt"&gt;--config-file&lt;/span&gt; &amp;lt;file&amp;gt;  specify a custom configuration file &lt;span class="o"&gt;(&lt;/span&gt;default: ./app/lib/config.js&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Most options are self explanatory, but the following options warrant some further explanation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;–development-mode&lt;/strong&gt; &lt;code&gt;-d&lt;/code&gt;: This option starts a development server with a file watcher and live reload, and will automatically regenerate your docs when any of your spec or app files change.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;–start-server&lt;/strong&gt; &lt;code&gt;-s&lt;/code&gt;: This option starts a production server without any development options enabled that serves the contents of your &lt;code&gt;--target-dir&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;–embeddable&lt;/strong&gt; &lt;code&gt;-e&lt;/code&gt;: This option lets you build a minimal version of the documentation without the HTML &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tags, so you can embed Spectacle into your own website template. More info on &lt;a href="#custom-builds"&gt;custom builds&lt;/a&gt; here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;–app-dir&lt;/strong&gt; &lt;code&gt;-a&lt;/code&gt;: This option overrides the default directory which contains all the Handlebars templates, SCSS, and JavaScript source files. This option is useful for development because you can copy the contents of &lt;code&gt;app&lt;/code&gt; to a remote location or a separate repo for custom builds.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;–target-dir&lt;/strong&gt; &lt;code&gt;-t&lt;/code&gt;: This option specifies where the generated documentation HTML files will be output.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="custom-builds"&gt;Custom Builds&lt;/h2&gt;

&lt;p&gt;The best option for building your own custom functionality into Spectacle is to &lt;a href="https://help.github.com/articles/fork-a-repo/"&gt;fork Spectacle on GitHub&lt;/a&gt;, and make your own modifications in source. This way you can keep up to date by merging changes from the &lt;code&gt;master&lt;/code&gt; branch, and your can also contribute your updates back to &lt;code&gt;master&lt;/code&gt; by creating a &lt;a href="https://help.github.com/articles/creating-a-pull-request/"&gt;Pull Request&lt;/a&gt; if you think they improve Spectacle somehow.&lt;/p&gt;

&lt;p&gt;To fork Spectacle go to &lt;code&gt;https://github.com/sourcey/spectacle&lt;/code&gt;, and press the ‘Fork’ button. Now you can &lt;code&gt;git clone git@github.com:&amp;lt;yourname&amp;gt;/spectacle.git&lt;/code&gt; to make your own changes.&lt;/p&gt;

&lt;p&gt;Alternatively, you can just copy the contents of &lt;code&gt;app&lt;/code&gt; from the main repo which contains all the source files such as templates, stylesheets and JavaScripts. Now just pass the path to your custom &lt;code&gt;app&lt;/code&gt; path to the CLI like so: &lt;code&gt;spectacle -a /path/to/your/app your_swagger_api.json&lt;/code&gt;&lt;/p&gt;

&lt;h2 id="optimizing-your-workflow"&gt;Optimizing Your Workflow&lt;/h2&gt;

&lt;p&gt;If you’re a developer you are always looking for ways to optimize your workflow. The great thing about the Swagger spec is that it enables you to use your API spec as a source for automating and generating all parts of your API system, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Inline Code Generators&lt;/strong&gt;: Generate your Swagger JSON or YAML from your source code comments.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Automate Testing&lt;/strong&gt;: Automate testing for all your API endpoints.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Code Generation&lt;/strong&gt;: Automatically generate client and server code from your spec.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Generate Documentation&lt;/strong&gt;: Really?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a list of open source libraries in many languages check here: http://swagger.io/open-source-integrations/&lt;/p&gt;

&lt;h2 id="more-information"&gt;More Information&lt;/h2&gt;

&lt;p&gt;Please use the &lt;a href="https://github.com/sourcey/spectacle/issues"&gt;GitHub issue tracker&lt;/a&gt; if you have any ideas or bugs to report.&lt;/p&gt;

&lt;p&gt;All contributions are welcome.&lt;/p&gt;

&lt;p&gt;Good luck and enjoy Spectacle!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building the Perfect Rails 5 API Only App</title>
    <link rel="alternate" href="https://sourcey.com/building-the-prefect-rails-5-api-only-app/"/>
    <id>https://sourcey.com/building-the-prefect-rails-5-api-only-app/</id>
    <published>2015-12-26T00:00:00Z</published>
    <updated>2016-11-01T10:52:05+01:00</updated>
    <author>
      <name>Kam Low</name>
    </author>
    <content type="html">&lt;div class="sidebar-section toc"&gt;
  &lt;h4 class="no_toc" id="contents"&gt;Contents&lt;/h4&gt;

&lt;ul id="markdown-toc"&gt;
  &lt;li&gt;&lt;a id="markdown-toc-installing-rails-5" href="#installing-rails-5"&gt;Installing Rails 5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-using-rspec-for-testing" href="#using-rspec-for-testing"&gt;Using RSpec for Testing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-bulding-your-api" href="#bulding-your-api"&gt;Bulding Your API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-serializing-api-output" href="#serializing-api-output"&gt;Serializing API Output&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-enabling-cors" href="#enabling-cors"&gt;Enabling CORS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-versioning-your-api" href="#versioning-your-api"&gt;Versioning Your API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-rate-limiting-and-throttling" href="#rate-limiting-and-throttling"&gt;Rate Limiting and Throttling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a id="markdown-toc-authenticating-your-api" href="#authenticating-your-api"&gt;Authenticating Your API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;p&gt;This how-to guide aims to help you get started the right way using Rails 5 to build the perfect API.
Thanks to the new &lt;code&gt;rails-api&lt;/code&gt; gem that ships as part of the Rails 5 core, Rails is now an ideal candidate for building streamlined APIs quickly and easily.&lt;/p&gt;

&lt;p&gt;Until now, arguably the best option for creating APIs in Ruby has been Grape, and while Grape is still a brilliant option (especially if you like to DIY), there are some great advantages to using Rails 5 in API mode, such as; ActiveRecord by default, a strong developer community, and having the asset pipeline and front end features available should you need them as your project evolves.&lt;/p&gt;

&lt;h2 id="installing-rails-5"&gt;Installing Rails 5&lt;/h2&gt;

&lt;p&gt;First, make sure you are running Ruby 2.2.2+ or newer as it’s required by Rails 5, then go ahead an install the Rails gem:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;gem install rails

&lt;span class="c"&gt;# version should be &amp;gt;= Rails 5.0.0&lt;/span&gt;
rails &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;According to the official &lt;a href="http://edgeguides.rubyonrails.org/api_app.html"&gt;Rails guide&lt;/a&gt; all we need to do to create an API only Rails app is to pass the &lt;code&gt;--api&lt;/code&gt; option at the command line when creating a new Rails app, like so:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;rails new api_app_name &lt;span class="nt"&gt;--api&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next thing is to run &lt;code&gt;bundle&lt;/code&gt; and &lt;code&gt;rake&lt;/code&gt; inside our app directory to install the default gems and setup the database:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;  &amp;lt;parent-folder-path&amp;gt;/api_app_name
bundle install
bin/rake db:setup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we have a shiny new API only Rails app without any of the incumbent front end bloat, and all of the inherent Railsy goodness. Nice!&lt;/p&gt;

&lt;h2 id="using-rspec-for-testing"&gt;Using RSpec for Testing&lt;/h2&gt;

&lt;p&gt;Before going any further let’s setup &lt;a href="http://rspec.info"&gt;RSpec&lt;/a&gt; for spec testing our application. The reason why it’s good to setup RSpec first is that we can save a bit of time using the built-in RSpec generators to auto generate default model and controller specs for us each time we use &lt;code&gt;rails generate scaffold&lt;/code&gt; to generate resources later on. To install RSpec, go ahead and add the &lt;a href="https://github.com/rspec/rspec-rails"&gt;rspec-rails&lt;/a&gt; gem to your Gemfile in the &lt;code&gt;:development, :test&lt;/code&gt; group:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="ss"&gt;:development&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:test&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="c1"&gt;# Use RSpec for specs&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'rspec-rails'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;gt;= 3.5.0'&lt;/span&gt;

  &lt;span class="c1"&gt;# Use Factory Girl for generating random test data&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'factory_girl_rails'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Update your bundle:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run the RSpec installer:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;bin/rails g rspec:install  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, you can get rid of the &lt;code&gt;test&lt;/code&gt; directory in Rails, since we won’t be writing unit tests, but writing specifications instead.&lt;/p&gt;

&lt;h2 id="bulding-your-api"&gt;Bulding Your API&lt;/h2&gt;

&lt;p&gt;Lets start building out our API controllers.&lt;/p&gt;

&lt;p&gt;When an app is created with the &lt;code&gt;--api&lt;/code&gt; flag you can use the default scaffold generators to generate your API resources as normal, without the need for any special arguments.&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;bin/rails g scaffold user name email
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will generate the following file structure:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;      invoke  active_record
   identical    db/migrate/20151222022044_create_users.rb
   identical    app/models/user.rb
      invoke    rspec
      create      spec/models/user_spec.rb
      invoke      factory_girl
      create        spec/factories/users.rb
      invoke  resource_route
       route    resources :users
      invoke  scaffold_controller
   identical    app/controllers/users_controller.rb
      invoke    rspec
      create      spec/controllers/users_controller_spec.rb
      create      spec/routing/users_routing_spec.rb
      invoke      rspec
      create        spec/requests/users_spec.rb

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that no views are created since we are running in API mode.&lt;/p&gt;

&lt;p&gt;Go ahead and repeat the process with as many resources as you like, and once you’re done you can migrate and run the app:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;bin/rake db:migrate

&lt;span class="c"&gt;# run the default server on port 3000&lt;/span&gt;
bin/rails s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your new API is now up and running on &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;. Sweet!&lt;/p&gt;

&lt;p&gt;You’re not done yet though, there are still a bunch of important points for consideration…&lt;/p&gt;

&lt;h2 id="serializing-api-output"&gt;Serializing API Output&lt;/h2&gt;

&lt;p&gt;In it’s current state our app will just spit out a JSON representation of every column in the database so we need a way to control what data gets served through the API.&lt;/p&gt;

&lt;p&gt;Normally we would use a front end templating engine such as &lt;code&gt;jbuilder&lt;/code&gt; for this purpose,
but since we’re not using views in our super streamlined API app, that’s not going to be an option.&lt;/p&gt;

&lt;p&gt;Fortunately AMS (Active Model Serializers) is here to save the day. AMS provides a clean layer between the model and the controller that lets us to call &lt;code&gt;to_json&lt;/code&gt; or &lt;code&gt;as_json&lt;/code&gt; on the &lt;code&gt;ActiveRecord&lt;/code&gt; object or collection as normal, while outputing our desired API format.&lt;/p&gt;

&lt;p&gt;Go ahead and add the &lt;code&gt;active_model_serializers&lt;/code&gt; gem to your Gemfile:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'active_model_serializers'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Update your bundle:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now lets create a default serializer for our User model:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;rails g serializer user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code&gt;app/serializers/user_serializer.rb&lt;/code&gt;, we find this code:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserSerializer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Serializer&lt;/span&gt;
  &lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that only the &lt;code&gt;:id&lt;/code&gt; attribute is added by default. That’s not going to be much use to us, so
go ahead and add the &lt;code&gt;:name&lt;/code&gt; and &lt;code&gt;:email&lt;/code&gt; attributes to the serializer:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserSerializer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Serializer&lt;/span&gt;
  &lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class="panel callout radius"&gt;If your model has relationships just declare them on the serializer as you would any other attributes to be serialized in the output.&lt;/p&gt;

&lt;p&gt;You may also need to include the &lt;code&gt;ActionController::Serialization&lt;/code&gt; dependency in your controller like so:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApplicationController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;API&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Serialization&lt;/span&gt;

  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now when you hit and User related API endpoint only the attributes in the &lt;code&gt;UserSerializer&lt;/code&gt; will be rendered. Nice!&lt;/p&gt;

&lt;p&gt;Check the &lt;a href="https://github.com/rails-api/active_model_serializers"&gt;active_model_serializers&lt;/a&gt; gem homepage for more detailed configuration options.&lt;/p&gt;

&lt;h2 id="enabling-cors"&gt;Enabling CORS&lt;/h2&gt;

&lt;p&gt;If you’re building a public API you’ll probably want to enable Cross-Origin Resource Sharing (CORS), in order to make cross-origin AJAX requests possible.&lt;/p&gt;

&lt;p&gt;This is made very simple by the &lt;code&gt;rack-cors&lt;/code&gt; gem. Just stick it in your Gemfile like so:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'rack-cors'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Update your bundle:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And put something like the code below in &lt;code&gt;config/application.rb&lt;/code&gt; of your Rails application. For example, this will allow GET, POST or OPTIONS requests from any origin on any resource.&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;YourApp&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Application&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Application&lt;/span&gt;

    &lt;span class="c1"&gt;# ...&lt;/span&gt;

    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;insert_before&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Rack::Cors"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;allow&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;origins&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;
        &lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:headers&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:methods&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:options&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more detailed configuration options please see the gem documentation: https://github.com/cyu/rack-cors&lt;/p&gt;

&lt;h2 id="versioning-your-api"&gt;Versioning Your API&lt;/h2&gt;

&lt;p&gt;Before releasing your public API into the wild, you should consider implementing some form of versioning.
Versioning breaks your API up into multiple version namespaces, such as &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt;,
so that you can maintain backwards compatibility for existing clients whenever you introduce breaking changes into your API, simply by incrementing your API version.&lt;/p&gt;

&lt;p&gt;This guide will show you how to setup versioning with the following URL format:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET http://api.mysite.com/v1/users/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using a subdomain instead of something like &lt;code&gt;/api/v1/users/&lt;/code&gt; is just a preference, although both are easy to accomplish in Rails.&lt;/p&gt;

&lt;p&gt;We can use a directory structure like this to keep our controller code clean by defining all our &lt;code&gt;v1&lt;/code&gt; controllers within the &lt;code&gt;Api::V1&lt;/code&gt; namespace:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app/controllers/
.
|-- api
|   `-- v1
|       |-- api_controller.rb
|       `-- users_controller.rb
|-- application_controller.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here’s what the controllers look like:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/api/v1/api_controller.rb&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Api::V1&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApiController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
    &lt;span class="c1"&gt;# Generic API stuff here&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/api/v1/users_controller.rb&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Api::V1&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UsersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApiController&lt;/span&gt;

    &lt;span class="c1"&gt;# GET /v1/users&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let’s setup our &lt;code&gt;config/routes.rb&lt;/code&gt; to tie everything together:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;constraints&lt;/span&gt; &lt;span class="ss"&gt;subdomain: &lt;/span&gt;&lt;span class="s1"&gt;'api'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;module: &lt;/span&gt;&lt;span class="s1"&gt;'api'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="ss"&gt;:v1&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;scope module: 'api'&lt;/code&gt; bit lets us route to controllers in the API module without explicitly including it in the URL. However, the version &lt;code&gt;v1/&lt;/code&gt; is part of the URL, and we also want to route to the V1 module, so we use &lt;code&gt;namespace&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you’re API routes are looking pretty sharp!&lt;/p&gt;

&lt;h2 id="rate-limiting-and-throttling"&gt;Rate Limiting and Throttling&lt;/h2&gt;

&lt;p&gt;To protect our API from DDoS, brute force attacks, hammering, or even to monetize with paid usage limits, we can use a Rake &lt;a href="http://guides.rubyonrails.org/rails_on_rack.html"&gt;middleware&lt;/a&gt; called &lt;code&gt;Rack::Attack&lt;/code&gt;. The &lt;a href="https://github.com/kickstarter/rack-attack"&gt;rack-attack&lt;/a&gt; gem was released by Kickstarter, and it allows us to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;whitelist&lt;/strong&gt;: Allowing it to process normally if certain conditions are true&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;blacklist&lt;/strong&gt;: Sending a denied message instantly for certain requests&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;throttle&lt;/strong&gt;: Checking if the user is within their allowed usage&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;track&lt;/strong&gt;: Tracking this request to be able to log certain information about our requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get started by adding the dependency to your Gemfile:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'rack-attack'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Update your bundle:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now update your &lt;code&gt;config/application.rb&lt;/code&gt; file to include it into your middleware stack:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;YourApp&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Application&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Application&lt;/span&gt;

    &lt;span class="c1"&gt;# ...&lt;/span&gt;

    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;use&lt;/span&gt; &lt;span class="no"&gt;Rack&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Attack&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a new initializer file in &lt;code&gt;config/initializers/rack_attack.rb&lt;/code&gt; to configure your &lt;code&gt;Rack::Attack&lt;/code&gt; rules. The example below is very basic, and it should give a good starting point although you may have different requirements altogether.&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Rack&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Attack&lt;/span&gt;

  &lt;span class="c1"&gt;# `Rack::Attack` is configured to use the `Rails.cache` value by default,&lt;/span&gt;
  &lt;span class="c1"&gt;# but you can override that by setting the `Rack::Attack.cache.store` value&lt;/span&gt;
  &lt;span class="no"&gt;Rack&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Attack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Cache&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;

  &lt;span class="c1"&gt;# Allow all local traffic&lt;/span&gt;
  &lt;span class="n"&gt;whitelist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'allow-localhost'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="s1"&gt;'127.0.0.1'&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;'::1'&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ip&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Allow an IP address to make 5 requests every 5 seconds&lt;/span&gt;
  &lt;span class="n"&gt;throttle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'req/ip'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;limit: &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;period: &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ip&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Send the following response to throttled clients&lt;/span&gt;
  &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;throttled_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;retry_after&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'rack.attack.match_data'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{})[&lt;/span&gt;&lt;span class="ss"&gt;:period&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="mi"&gt;429&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Retry-After'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;retry_after&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;error: &lt;/span&gt;&lt;span class="s2"&gt;"Throttle limit reached. Retry later."&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a full list of configuration options check the &lt;a href="https://github.com/kickstarter/rack-attack"&gt;Rack::Attack&lt;/a&gt; gem homepage.&lt;/p&gt;

&lt;p&gt;Now that your API is safe from brute force attacks and bad client code you can sleep a little better at night!&lt;/p&gt;

&lt;h2 id="authenticating-your-api"&gt;Authenticating Your API&lt;/h2&gt;

&lt;p&gt;Let’s lock our API down with some authentication.&lt;/p&gt;

&lt;p&gt;As a rule API’s should be stateless, and therefore should not have any knowledge of cookies or sessions.&lt;/p&gt;

&lt;p class="panel callout radius"&gt;If you require sessions then you should be looking at implementing some form of &lt;a href="http://oauth.net/2"&gt;OAuth&lt;/a&gt; based authentication, but that won’t be covered in this guide.&lt;/p&gt;

&lt;p&gt;A good way of authenticating API requests is using HTTP token based authentication, which involves clients including a API key of some sort in the HTTP &lt;code&gt;Authorization&lt;/code&gt; header of each request, like so:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Authorization: Token token="WCZZYjnOQFUYfJIN2ShH1iD24UHo58A6TI"
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First let’s update create a migration to add the &lt;code&gt;api_key&lt;/code&gt; attribute to our &lt;code&gt;User&lt;/code&gt; model:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;migration&lt;/span&gt; &lt;span class="no"&gt;AddApiKeyToUsers&lt;/span&gt; &lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="ss"&gt;:string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now update the &lt;code&gt;User&lt;/code&gt; model to include the following methods:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;

  &lt;span class="c1"&gt;# Assign an API key on create&lt;/span&gt;
  &lt;span class="n"&gt;before_create&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;api_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;generate_api_key&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Generate a unique API key&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_api_key&lt;/span&gt;
    &lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;SecureRandom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'+/='&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Qrt'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exists?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;api_key: &lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On the controller side we can implement the authentication using the built in &lt;code&gt;authenticate_or_request_with_http_token&lt;/code&gt; Rails method.&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApplicationController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HttpAuthentication&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ControllerMethods&lt;/span&gt;

  &lt;span class="c1"&gt;# Add a before_action to authenticate all requests.&lt;/span&gt;
  &lt;span class="c1"&gt;# Move this to subclassed controllers if you only&lt;/span&gt;
  &lt;span class="c1"&gt;# want to authenticate certain methods.&lt;/span&gt;
  &lt;span class="n"&gt;before_action&lt;/span&gt; &lt;span class="ss"&gt;:authenticate&lt;/span&gt;

  &lt;span class="kp"&gt;protected&lt;/span&gt;

  &lt;span class="c1"&gt;# Authenticate the user with token based authentication&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authenticate&lt;/span&gt;
    &lt;span class="n"&gt;authenticate_token&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;render_unauthorized&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authenticate_token&lt;/span&gt;
    &lt;span class="n"&gt;authenticate_with_http_token&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="vi"&gt;@current_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;api_key: &lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_unauthorized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;realm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Application"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"WWW-Authenticate"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;%(Token realm="#{realm.gsub(/"/, "")}")&lt;/span&gt;
    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="s1"&gt;'Bad credentials'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;status: :unauthorized&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can test our authenticated API using &lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Authorization: Token token=PsmmvKBqQDOaWwEsPpOCYMsy"&lt;/span&gt; http://localhost:3000/users
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class="no_toc" id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now you have the keys to the castle, and all the basics for building an API the Rails way.&lt;/p&gt;

&lt;p&gt;Hopefully then guide was helpful for you, and if you want any points clarified or just want to say thanks then feel free to use the comments below.&lt;/p&gt;

&lt;p&gt;Cheers, and happy coding!&lt;/p&gt;
</content>
  </entry>
</feed>
